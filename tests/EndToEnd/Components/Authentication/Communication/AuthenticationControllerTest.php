<?php
declare(strict_types=1);

namespace App\Tests\EndToEnd\Components\Authentication\Communication;

use App\DataFixtures\UserFixture;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use function PHPUnit\Framework\assertSame;

class AuthenticationControllerTest extends WebTestCase
{
    public readonly KernelBrowser $client;
    protected function setUp(): void
    {
        $this->client = self::createClient();

        $this->entityManager = $this->client->getContainer()->get('Doctrine\ORM\EntityManagerInterface');

        $this->loadUserFixture();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        $connection = $this->entityManager->getConnection();

        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');
        $connection->close();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function loadUserFixture(): void
    {
        (new UserFixture())->load($this->entityManager);
    }

    public function testLoginValid() : void
    {
        $crawler = $this->client->request('GET', '/login');
        self::assertSelectorTextContains('h1', 'Login');

        $form = $crawler->selectButton('Login')->form();
        $this->client->submit($form, [
            '_username' => 'Hannah@montana.com',
            '_password' => 'Qwertz123**',
        ]);

        $this->client->followRedirect();

        $this->assertStringContainsString('/home', $this->client->getRequest()->getUri());
    }
    public function testLoginInvalid() : void
    {
        $crawler = $this->client->request('GET', '/login');
        self::assertSelectorTextContains('h1', 'Login');

        $form = $crawler->selectButton('Login')->form();
        $this->client->submit($form, [
            '_username' => 'Hannah@montana.com',
            '_password' => 'wrongPassword',
        ]);
        $usernameInput = $form->get('_username');
        $usernameValue = $usernameInput->getValue();

        $this->client->followRedirect();
        $this->assertStringContainsString('/login', $this->client->getRequest()->getUri());
        self::assertSame('Hannah@montana.com', $usernameValue);
        self::assertStringContainsString('Invalid credentials.', $this->client->getResponse()->getContent());
    }
}