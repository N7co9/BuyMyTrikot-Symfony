<?php
declare(strict_types=1);

namespace App\Tests\EndToEnd\Components\Registration\Communication;

use App\DataFixtures\UserFixture;
use App\Kernel;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class RegistrationControllerTest extends WebTestCase
{
    private KernelBrowser $client;

    protected function setUp(): void
    {
        $this->client = self::createClient();

        $this->entityManager = $this->client->getContainer()->get('Doctrine\ORM\EntityManagerInterface');

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        $connection = $this->entityManager->getConnection();

        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');
        $connection->close();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function loadUserFixture(): void
    {
        (new UserFixture())->load($this->entityManager);
    }

    public function testRegisterPageDisplayGET(): void
    {
        $this->client->request('GET', '/register');

        $httpResponse = $this->client->getResponse()->getContent();

        self::assertStringContainsString('Register', $httpResponse);
        self::assertStringContainsString('Email', $httpResponse);
        self::assertStringContainsString('Username', $httpResponse);
        self::assertStringContainsString('Password', $httpResponse);
    }

    public function testRegisterFormProcessingPOST(): void
    {
        $crawler = $this->client->request('GET', '/register');
        self::assertSelectorTextContains('h2', 'Register');

        $form = $crawler->selectButton('Register')->form();
        $this->client->submit($form, [
            'email' => 'Hannah@m11ontana.com',
            'username' => 'Hannah',
            'password' => 'Xyz12345*',
        ]);

        $this->client->followRedirect();

        $this->assertStringContainsString('/login', $this->client->getRequest()->getUri());
    }

    /*
     * Exception testing begins here.
     */

    public function testRegisterFormProcessingPOSTEmailAlreadyTaken(): void
    {
        $this->loadUserFixture();

        $crawler = $this->client->request('GET', '/register');
        self::assertSelectorTextContains('h2', 'Register');

        $form = $crawler->selectButton('Register')->form();
        $this->client->submit($form, [
            'email' => 'Hannah@montana.com',
            'username' => 'Hannah',
            'password' => 'Xyz12345*',
        ]);

        $this->assertStringNotContainsString('/login', $this->client->getRequest()->getUri());
        self::assertStringContainsString('Email is not unique!!!', $this->client->getResponse()->getContent());
    }

    public function testRegisterFormProcessingPOSTInvalidEmail(): void
    {
        $crawler = $this->client->request('GET', '/register');
        self::assertSelectorTextContains('h2', 'Register');

        $form = $crawler->selectButton('Register')->form();
        $this->client->submit($form, [
            'email' => 'ThisIsNotAValidEmail',
            'username' => 'Hannah',
            'password' => 'Xyz12345*',
        ]);

        $this->assertStringNotContainsString('/login', $this->client->getRequest()->getUri());
        self::assertStringContainsString('Oops, your email doesn&#039;t look right', $this->client->getResponse()->getContent());
    }

    public function testRegisterFormProcessingPOSTInvalidUsername(): void
    {
        $crawler = $this->client->request('GET', '/register');
        self::assertSelectorTextContains('h2', 'Register');

        $form = $crawler->selectButton('Register')->form();
        $this->client->submit($form, [
            'email' => 'Hannah@Montana.com',
            'username' => '12**This**IsNotAValidUsername;;3',
            'password' => 'Xyz12345*',
        ]);

        $this->assertStringNotContainsString('/login', $this->client->getRequest()->getUri());
        self::assertStringContainsString('Oops, your name doesn&#039;t look right', $this->client->getResponse()->getContent());
    }

    public function testRegisterFormProcessingPOSTInvalidPassword(): void
    {
        $crawler = $this->client->request('GET', '/register');
        self::assertSelectorTextContains('h2', 'Register');

        $form = $crawler->selectButton('Register')->form();
        $this->client->submit($form, [
            'email' => 'Hannah@Montana.com',
            'username' => 'Hannah',
            'password' => 'notValid',
        ]);

        $this->assertStringNotContainsString('/login', $this->client->getRequest()->getUri());
        self::assertStringContainsString('Oops, your password doesn&#039;t look right!', $this->client->getResponse()->getContent());
    }
}