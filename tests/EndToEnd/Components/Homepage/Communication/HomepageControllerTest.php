<?php
declare(strict_types=1);

namespace App\Tests\EndToEnd\Components\Homepage\Communication;

use App\DataFixtures\UserFixture;
use App\Global\Persistence\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class HomepageControllerTest extends WebTestCase
{
    private readonly KernelBrowser $client;
    private null|\Doctrine\ORM\EntityManager $entityManager;

    protected function setUp(): void
    {
        $this->client = self::createClient();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        $entityManager = self::getContainer()->get(EntityManagerInterface::class);
        $connection = $entityManager->getConnection();
        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');
        $connection->close();
        parent::tearDown();
    }

    public function createAuthenticatedClient(): void
    {
        $container = $this->client->getContainer();
        $this->entityManager = $container->get(EntityManagerInterface::class);

        $this->loadUserFixture();

        $userRepository = $container->get(UserRepository::class);
        $user = $userRepository->findOneByEmail('Hannah@montana.com');
        $this->client->loginUser($user);
    }

    protected function loadUserFixture(): void
    {
        (new UserFixture())->load($this->entityManager);
    }

    public function testIndexNoUser(): void
    {
        $this->client->request('GET', '/home/');

        self::assertResponseIsSuccessful();
        self::assertStringNotContainsString('Nice to have you here', $this->client->getResponse()->getContent());
    }

    public function testIndexAuthenticatedUser(): void
    {
        $this->createAuthenticatedClient();

        $this->client->request('GET', '/home/');

        self::assertResponseIsSuccessful();
        self::assertStringContainsString('Nice to have you here', $this->client->getResponse()->getContent());
    }

    public function testBrowse(): void
    {
        $this->createAuthenticatedClient();

        $this->client->request('GET', '/home/browse/4');

        self::assertStringContainsString('Items from Borussia Dortmund:', $this->client->getResponse()->getContent());
    }

    public function testSearchRedirect() : void
    {
        $this->client->request('GET', 'home/search?query=Borussia+Dortmund');
        self::assertResponseRedirects('/home/browse/Borussia%20Dortmund');

        $this->client->followRedirect();

        self::assertStringContainsString('Gregor Kobel Trikot', $this->client->getResponse()->getContent());
        self::assertStringContainsString('Alexander Meyer Trikot', $this->client->getResponse()->getContent());
        self::assertStringContainsString('Mats Hummels Trikot', $this->client->getResponse()->getContent());
    }

}