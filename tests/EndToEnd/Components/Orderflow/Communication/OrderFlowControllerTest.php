<?php
declare(strict_types=1);

namespace App\Tests\EndToEnd\Components\Orderflow\Communication;

use App\DataFixtures\ItemsFixture;
use App\DataFixtures\ShoppingCartFixture;
use App\DataFixtures\UserFixture;
use App\Entity\User;
use App\Global\Persistence\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DomCrawler\Crawler;

class OrderFlowControllerTest extends WebTestCase
{
    private readonly KernelBrowser $client;
    private readonly EntityManagerInterface $entityManager;

    private ContainerInterface $container;

    protected function setUp(): void
    {
        $this->client = self::createClient();
        $this->container = $this->client->getContainer();
        $this->entityManager = $this->container->get(EntityManagerInterface::class);

        $this->createAuthenticatedClient();
        $this->loadItemsFixture();
        $this->loadShoppingCartFixture();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        $entityManager = $this->entityManager;

        $connection = $entityManager->getConnection();

        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');

        $connection->executeQuery('DELETE FROM shopping_cart');
        $connection->executeQuery('ALTER TABLE shopping_cart AUTO_INCREMENT=0');

        $connection->executeQuery('DELETE FROM items');
        $connection->executeQuery('ALTER TABLE items AUTO_INCREMENT=0');


        $connection->close();
        parent::tearDown();
    }
    protected function loadItemsFixture(): void
    {
        (new ItemsFixture())->load($this->entityManager);
    }

    protected function loadShoppingCartFixture(): void
    {
        (new ShoppingCartFixture())->load($this->entityManager);
    }

    protected function loadUserFixture(): void
    {
        (new UserFixture())->load($this->entityManager);
    }

    protected function createAuthenticatedClient(): void
    {
        $connection = $this->entityManager->getConnection();

        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');

        $connection->close();

        $this->loadUserFixture();
        $userRepository = $this->container->get(UserRepository::class);
        $user = $userRepository->findOneByEmail('John@doe.com');
        $this->client->loginUser($user);
    }

    /*
     * In this case GET means, that no FORM has been submitted yet. The Page should only be displaying an empty
     * FORM with details of the items, if any are available.
     *
     * This test asserts the right calculation, as well as the right display of Items.
     */

    public function testIndexGET(): void
    {
        $this->client->request('GET', '/order/flow');
        $htmlResponse = $this->client->getResponse()->getContent();

        $crawler = new Crawler($htmlResponse);
        $subtotal = $crawler->filter('#subtotal-cost')->text();
        $total = $crawler->filter('#total-cost')->text();


        self::assertSame('$363.35', $subtotal);
        self::assertSame('$396.7525', $total);
        self::assertStringContainsString('John@doe.com', $htmlResponse);
        self::assertStringContainsString('Gregor Kobel', $htmlResponse);
        self::assertStringContainsString('Silas Ostrzinski', $htmlResponse);
        self::assertStringContainsString('Subtotal', $htmlResponse);
        self::assertStringContainsString('Total', $htmlResponse);
    }

    public function testIndexSuccessfulPOST() : void
    {
        $crawler = $this->client->request('GET', '/order/flow');

        $form = $crawler->filter('form')->form();
        $form['email-address'] = 'john.doe@example.com';
        $form['first-name'] = 'John';
        $form['last-name'] = 'Doe';

        $form['address'] = '123 Main St';
        $form['city'] = 'Anytown';
        $form['country'] = 'Germany';
        $form['region'] = 'Bavaria';
        $form['postal-code'] = '12345';
        $form['phone'] = '+59010331913';

        $form['delivery-method'] = 'Standard';

        $form['payment-type'] = 'credit-card';

        $this->client->submit($form);

        self::assertStringContainsString('Redirecting to /order/flow/thankyou', $this->client->getResponse()->getContent());
    }

    public function testSuccess() : void
    {
        $crawler = $this->client->request('GET', '/order/flow');

        $form = $crawler->filter('form')->form();
        $form['email-address'] = 'John@doe.com';
        $form['first-name'] = 'John';
        $form['last-name'] = 'Doe';

        $form['address'] = '123 Main St';
        $form['city'] = 'Anytown';
        $form['country'] = 'Germany';
        $form['region'] = 'Bavaria';
        $form['postal-code'] = '12345';
        $form['phone'] = '+59010331913';

        $form['delivery-method'] = 'Standard';

        $form['payment-type'] = 'credit-card';

        $this->client->submit($form);
        $this->client->followRedirect();

        self::assertStringContainsString('Order placed', $this->client->getResponse()->getContent());
        self::assertStringContainsString('Billing Summary', $this->client->getResponse()->getContent());
        self::assertStringContainsString('Order placed', $this->client->getResponse()->getContent());
        self::assertStringContainsString('Order placed', $this->client->getResponse()->getContent());
    }

    public function testSuccessNoRecentOrderException() : void
    {
        $crawler = $this->client->request('GET', '/order/flow');

        $form = $crawler->filter('form')->form();
        $form['email-address'] = 'John@doe.com';
        $form['first-name'] = 'John';
        $form['last-name'] = 'Doe';

        $form['address'] = '123 Main St';
        $form['city'] = 'Anytown';
        $form['country'] = 'Germany';
        $form['region'] = 'Bavaria';
        $form['postal-code'] = '12345';
        $form['phone'] = '+59010331913';

        $form['delivery-method'] = 'Standard';

        $form['payment-type'] = 'credit-card';

        $this->client->submit($form);

        $connection = $this->entityManager->getConnection();
        $connection->executeQuery('DELETE FROM orders');
        $connection->executeQuery('ALTER TABLE orders AUTO_INCREMENT=0');
        $connection->close();

        $this->client->followRedirect();

        self::assertStringContainsString('Order not found.', $this->client->getResponse()->getContent());
    }

}