<?php
declare(strict_types=1);

namespace App\Tests\EndToEnd\Components\ShoppingCart\Communication;

use App\Components\User\Persistence\UserRepository;
use App\DataFixtures\ItemsFixture;
use App\DataFixtures\ShoppingCartFixture;
use App\DataFixtures\UserFixture;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\DomCrawler\Crawler;


class ShoppingCartControllerTest extends WebTestCase
{
    private KernelBrowser $client;
    protected function setUp(): void
    {
        $this->client = self::createClient();

        $this->entityManager = self::getContainer()->get(EntityManagerInterface::class);
        (new ItemsFixture())->load($this->entityManager);
        (new ShoppingCartFixture())->load($this->entityManager);


        parent::setUp(); // TODO: Change the autogenerated stub
    }
    protected function tearDown(): void
    {
        $connection = $this->entityManager->getConnection();

        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');

        $connection->executeQuery('DELETE FROM items');
        $connection->executeQuery('ALTER TABLE items AUTO_INCREMENT=0');

        $connection->executeQuery('DELETE FROM shopping_cart');
        $connection->executeQuery('ALTER TABLE shopping_cart AUTO_INCREMENT=0');

        $connection->close();
        parent::tearDown();
    }

    public function createAuthenticatedClient(): void
    {
        $container = $this->client->getContainer();
        $this->entityManager = $container->get(EntityManagerInterface::class);

        $connection = $this->entityManager->getConnection();
        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');
        $connection->close();


        (new UserFixture())->load($this->entityManager);

        $userRepository = $container->get(UserRepository::class);
        $user = $userRepository->findOneByEmail('John@doe.com');
        $this->client->loginUser($user);
    }

    public function testIndexDisplayItems() : void
    {
        $this->createAuthenticatedClient();

        $connection = $this->entityManager->getConnection();
        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');

        $this->client->request('GET', '/shopping/cart');

        $httpResponse = $this->client->getResponse()->getContent();

        self::assertStringContainsString('Marcel Lotka', $httpResponse);
        self::assertStringContainsString('In stock', $httpResponse);
        self::assertStringContainsString('Checkout', $httpResponse);

    }

    public function testSaveNewItem() : void
    {
        $this->createAuthenticatedClient();

        $this->client->request('GET', '/shopping/cart/add/8805');

        $this->client->followRedirect();

        $httpResponse = $this->client->getResponse()->getContent();

        self::assertStringContainsString('Ramy Bensebaini', $httpResponse);
        self::assertStringContainsString('8805', $httpResponse);
    }

    public function testSaveIncreaseQuantity() : void
    {
        $this->createAuthenticatedClient();

        $this->client->request('GET', '/shopping/cart/add/334/5');

        $this->client->followRedirect();

        $httpResponse = $this->client->getResponse()->getContent();

        $crawler = new Crawler($httpResponse);
        $selectedQuantity = $crawler->filter('#quantity-334 option[selected]')->attr('value');

        self::assertSame('5', $selectedQuantity);
    }

    public function testRemove() : void
    {
        $this->createAuthenticatedClient();

        $this->client->request('GET', '/shopping/cart/remove/334');

        $this->client->followRedirect();

        $httpResponse = $this->client->getResponse()->getContent();

        self::assertStringNotContainsString('Gregor Kobel', $httpResponse);
    }
}