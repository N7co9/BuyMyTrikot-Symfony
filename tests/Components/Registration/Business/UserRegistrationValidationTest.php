<?php

namespace App\Tests\Components\Registration\Business;

use App\Components\Registration\Business\Validation\UserRegistrationValidation;
use App\Global\Persistence\DTO\UserDTO;
use PHPUnit\Framework\TestCase;

class UserRegistrationValidationTest extends TestCase
{
    public UserDTO $userDTO;
    public function setUp(): void
    {
        $this->userDTO = new UserDTO();

        $this->userDTO->email = 'valid@valid.com';
        $this->userDTO->password = 'ValidPW**123';
        $this->userDTO->username = 'ValidUserName';


        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testValidateName()
    {
        $validation = new UserRegistrationValidation();

        // Test valid name
        $this->userDTO->username = 'John Doe';
        $errors = $validation->validate($this->userDTO);
        $this->assertEmpty($errors);

        // Test invalid name
        $this->userDTO->username = '123';
        $errors = $validation->validate($this->userDTO);
        $this->assertCount(1, $errors);
        $this->assertEquals('Oops, your name doesn\'t look right', $errors[0]->message);
        $this->assertEquals('Exception', $errors[0]->type);
    }

    public function testValidateEmail()
    {
        $validation = new UserRegistrationValidation();

        // Test valid email
        $this->userDTO->email = 'john.doe@example.com';
        $errors = $validation->validate($this->userDTO);
        $this->assertEmpty($errors);

        // Test invalid email (missing '@' symbol)
        $this->userDTO->email = 'johndoeexample.com';
        $errors = $validation->validate($this->userDTO);
        $this->assertCount(1, $errors);
        $this->assertEquals('Oops, your email doesn\'t look right', $errors[0]->message);
        $this->assertEquals('Exception', $errors[0]->type);

        // Add more test cases for email validation
    }

    public function testValidatePassword()
    {
        $validation = new UserRegistrationValidation();

        // Test valid password
        $this->userDTO->password = 'Password123*';
        $errors = $validation->validate($this->userDTO);
        $this->assertEmpty($errors);

        // Test invalid password (no uppercase letter)
        $this->userDTO->password = 'password123';
        $errors = $validation->validate($this->userDTO);
        $this->assertCount(1, $errors);
        $this->assertEquals('Oops, your password doesn\'t look right!', $errors[0]->message);
        $this->assertEquals('Exception', $errors[0]->type);

        // Test invalid password (no lowercase letter)
        $this->userDTO->password = 'PASSWORD123';
        $errors = $validation->validate($this->userDTO);
        $this->assertCount(1, $errors);
        $this->assertEquals('Oops, your password doesn\'t look right!', $errors[0]->message);
        $this->assertEquals('Exception', $errors[0]->type);

        // Test invalid password (no digit)
        $this->userDTO->password = 'Password';
        $errors = $validation->validate($this->userDTO);
        $this->assertCount(1, $errors);
        $this->assertEquals('Oops, your password doesn\'t look right!', $errors[0]->message);
        $this->assertEquals('Exception', $errors[0]->type);

        // Test invalid password (no special character)
        $this->userDTO->password = 'Password123';
        $errors = $validation->validate($this->userDTO);
        $this->assertCount(1, $errors);
        $this->assertEquals('Oops, your password doesn\'t look right!', $errors[0]->message);
        $this->assertEquals('Exception', $errors[0]->type);

        // Test invalid password (too short)
        $this->userDTO->password = 'Pass1';
        $errors = $validation->validate($this->userDTO);
        $this->assertCount(1, $errors);
        $this->assertEquals('Oops, your password doesn\'t look right!', $errors[0]->message);
        $this->assertEquals('Exception', $errors[0]->type);

        // Add more test cases for password validation
    }

}