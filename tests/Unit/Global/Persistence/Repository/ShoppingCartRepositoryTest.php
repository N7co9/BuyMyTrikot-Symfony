<?php declare(strict_types=1);

namespace App\Tests\Unit\Global\Persistence\Repository;

use App\Components\ShoppingCart\Persistence\Dto\ShoppingCartSaveDTO;
use App\Components\ShoppingCart\Persistence\ShoppingCartEntityManager;
use App\Components\ShoppingCart\Persistence\ShoppingCartRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class ShoppingCartRepositoryTest extends KernelTestCase
{
    /**
     * @var ShoppingCartRepository
     */
    private ShoppingCartRepository $shoppingCartRepository;
    private ShoppingCartEntityManager $shoppingCartEntityManager;
    private EntityManagerInterface $entityManager;


    public function setUp(): void
    {
        /** @var ShoppingCartRepository $shoppingCartRepository */
        $shoppingCartRepository = static::getContainer()->get(ShoppingCartRepository::class);;
        $this->shoppingCartRepository = $shoppingCartRepository;

        /** @var ShoppingCartEntityManager $shoppingCartEntityManager */
        $shoppingCartEntityManager = static::getContainer()->get(ShoppingCartEntityManager::class);;
        $this->shoppingCartEntityManager = $shoppingCartEntityManager;

        /** @var EntityManagerInterface $entityManager */
        $entityManager = self::getContainer()->get(EntityManagerInterface::class);
        $this->entityManager = $entityManager;

        parent::setUp();
    }

    public function tearDown(): void
    {

        $connection = $this->entityManager->getConnection();

        $connection->executeQuery('DELETE FROM shopping_cart');
        $connection->executeQuery('ALTER TABLE shopping_cart AUTO_INCREMENT=0');

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testFindByUserId(): void
    {
        $shoppingCartSaveDto = new ShoppingCartSaveDTO(
            quantity: 1, itemId: 33, userId: 300, id: 20
        );

        $this->shoppingCartEntityManager->save($shoppingCartSaveDto);

        $res = $this->shoppingCartRepository->findByUserId(300);

        self::assertSame(1, $res[0]->quantity);
        self::assertSame(33, $res[0]->itemId);
        self::assertSame(300, $res[0]->userId);
    }
}