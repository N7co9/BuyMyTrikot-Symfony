<?php
declare(strict_types=1);

namespace App\Tests\Unit\Components\Orderflow\Communication\Form;

use App\Components\Orderflow\Communication\Form\OrderFlowValidation;
use App\Global\Persistence\DTO\OrderDTO;
use Monolog\Test\TestCase;

class OrderFlowValidationTest extends TestCase
{
    private OrderFlowValidation $validation;
    protected function setUp(): void
    {
        $this->validation = new OrderFlowValidation();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function createOrderDTO() : OrderDTO
    {
        $orderDTO = new OrderDTO();

        $orderDTO->firstName = 'Hannah';
        $orderDTO->lastName = 'Montana';
        $orderDTO->city = 'Los Angeles';
        $orderDTO->zip = '11111';
        $orderDTO->address = 'Angel Way';
        $orderDTO->state = 'California';
        $orderDTO->phoneNumber = '+49013984103';

        return  $orderDTO;
    }
    public function testValidate() : void
    {
        $orderDTO = $this->createOrderDTO();

        $res = $this->validation->validate($orderDTO);

        self::assertIsArray($res);
        self::assertEmpty($res);
    }

    /*
     * Exception testing begins here:
     */

    public function testValidateFirstNameException(): void
    {
        $orderDTO = $this->createOrderDTO();
        $orderDTO->firstName = '483**INVALID';

        $res = $this->validation->validate($orderDTO);

        self::assertIsArray($res);
        self::assertSame('Oops, your first name doesn\'t look right!', $res['firstName']->getMessage());
    }
    public function testValidateLastNameException(): void
    {
        $orderDTO = $this->createOrderDTO();
        $orderDTO->lastName = '12345';
        $res = $this->validation->validate($orderDTO);
        self::assertIsArray($res);
        self::assertSame('Oops, your last name doesn\'t look right!', $res['lastName']->getMessage());
    }

    public function testValidateCityException(): void
    {
        $orderDTO = $this->createOrderDTO();
        $orderDTO->city = '123';
        $res = $this->validation->validate($orderDTO);
        self::assertIsArray($res);
        self::assertSame('Oops, your City doesn\'t look right!', $res['city']->getMessage());
    }

    public function testValidateStateException(): void
    {
        $orderDTO = $this->createOrderDTO();
        $orderDTO->state = '!!';
        $res = $this->validation->validate($orderDTO);
        self::assertIsArray($res);
        self::assertSame('Oops, your State doesn\'t look right!', $res['region']->getMessage());
    }

    public function testValidatePhoneNumberException(): void
    {
        $orderDTO = $this->createOrderDTO();
        $orderDTO->phoneNumber = 'invalid';
        $res = $this->validation->validate($orderDTO);
        self::assertIsArray($res);
        self::assertSame('Oops, your phone number doesn\'t look right!', $res['phoneNumber']->getMessage());
    }

    public function testValidateZipException(): void
    {
        $orderDTO = $this->createOrderDTO();
        $orderDTO->zip = 'abcde';
        $res = $this->validation->validate($orderDTO);
        self::assertIsArray($res);
        self::assertSame('Oops, your Postcode doesn\'t look right!', $res['zip']->getMessage());
    }

    public function testValidateAddressException(): void
    {
        $orderDTO = $this->createOrderDTO();
        $orderDTO->address = '!@#';
        $res = $this->validation->validate($orderDTO);
        self::assertIsArray($res);
        self::assertSame('Oops, your Address doesn\'t look right!', $res['address']->getMessage());
    }
}