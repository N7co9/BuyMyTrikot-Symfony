<?php
declare(strict_types=1);

namespace App\Tests\Integration\Components\ShoppingCart\Business;

use App\Components\ShoppingCart\Business\ShoppingCartBusinessFacade;
use App\Components\ShoppingCart\Dto\ShoppingCartItemDto;
use App\Components\ShoppingCart\Dto\ShoppingCartSaveDTO;
use App\Components\ShoppingCart\Persistence\ShoppingCartRepository;
use App\DataFixtures\ItemsFixture;
use App\DataFixtures\ShoppingCartFixture;
use App\DataFixtures\UserFixture;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class ShoppingCartBusinessFacadeTest extends KernelTestCase
{
    private readonly ShoppingCartBusinessFacade $shoppingCartBusinessFacade;
    private readonly ShoppingCartRepository $shoppingCartRepository;

    protected function setUp(): void
    {
        self::bootKernel();
        $container = static::getContainer();

        $this->shoppingCartBusinessFacade = $container->get(ShoppingCartBusinessFacade::class);
        $this->entityManager = $container->get(EntityManagerInterface::class);
        $this->shoppingCartRepository = $container->get(ShoppingCartRepository::class);

        $this->loadUserFixture();
        $this->loadShoppingCartFixture();
        $this->loadItemsFixture();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        $connection = $this->entityManager->getConnection();

        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');

        $connection->executeQuery('DELETE FROM shopping_cart');
        $connection->executeQuery('ALTER TABLE shopping_cart AUTO_INCREMENT=0');

        $connection->executeQuery('DELETE FROM items');
        $connection->executeQuery('ALTER TABLE items AUTO_INCREMENT=0');

        $connection->close();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function loadUserFixture(): void
    {
        (new UserFixture())->load($this->entityManager);
    }

    protected function loadShoppingCartFixture(): void
    {
        (new ShoppingCartFixture())->load($this->entityManager);
    }

    protected function loadItemsFixture(): void
    {
        (new ItemsFixture())->load($this->entityManager);
    }

    protected function createShoppingCartDTO(): ShoppingCartSaveDTO
    {
        return new ShoppingCartSaveDTO
        (
            quantity: 3, itemId: 99, userId: 3, id: 0
        );
    }

    public function testGetCart(): void
    {
        $res = $this->shoppingCartBusinessFacade->getCart(3);

        self::assertSame(149.99, $res[0]->price);
        self::assertSame('thumbnail3.png', $res[0]->thumbnail);
        self::assertSame('Player 3', $res[0]->name);

        self::assertSame(77.99, $res[1]->price);
        self::assertSame('thumbnail4.png', $res[1]->thumbnail);
        self::assertSame('Player 4', $res[1]->name);
    }

    public function testSaveItemToCartNewItem(): void
    {
        $shoppingCartDTO = $this->createShoppingCartDTO();

        $this->shoppingCartBusinessFacade->saveItemToCart($shoppingCartDTO);

        $res = $this->shoppingCartRepository->findByUserId(3);

        self::assertSame(99, $res[2]->itemId);
        self::assertSame(3, $res[2]->quantity);
        self::assertSame(5, $res[2]->id);
    }

    public function testSaveItemToCartIncreaseQuantityOfExistingItem(): void
    {
        $shoppingCartDTO = new ShoppingCartSaveDTO
        (
            quantity: 10, itemId: 1, userId: 3, id: 0
        );

        $this->shoppingCartBusinessFacade->saveItemToCart($shoppingCartDTO);

        $res = $this->shoppingCartRepository->findByUserId(3);

        self::assertSame(10, $res[0]->quantity);
        self::assertSame(1, $res[0]->itemId);
        self::assertSame(3, $res[0]->userId);
    }

    public function testCalculateExpenses(): void
    {
        $item1 = new ShoppingCartItemDto(1, 101, 2, 'Product 1', 19.99, 'thumbnail1.jpg', 1001);
        $item2 = new ShoppingCartItemDto(2, 101, 3, 'Product 2', 29.99, 'thumbnail2.jpg', 1002);
        $item3 = new ShoppingCartItemDto(3, 102, 1, 'Product 3', 9.99, 'thumbnail3.jpg', 1003);

        $shoppingCartItems = [
            $item1,
            $item2,
            $item3,
        ];

        $res = $this->shoppingCartBusinessFacade->calculateExpenses($shoppingCartItems);

        self::assertSame(146.7881, $res->total);
        self::assertSame(4.95, $res->shipping);
        self::assertSame(139.94, $res->subTotal);
    }

    public function testRemove(): void
    {
        $this->shoppingCartBusinessFacade->remove(2);
        $this->shoppingCartBusinessFacade->remove(1);

        $res = $this->shoppingCartRepository->findByUserId(3);
        self::assertIsArray($res);
        self::assertEmpty($res);
    }
}
