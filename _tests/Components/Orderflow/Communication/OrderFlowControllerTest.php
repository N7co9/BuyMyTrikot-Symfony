<?php

namespace App\Tests\Components\Orderflow\Communication;

use App\Components\Orderflow\Business\OrderFlowValidation;
use App\Components\Orderflow\Persistence\OrderFlowEntityManager;
use App\Components\Orderflow\Persistence\OrdersRepository;
use App\Components\Registration\Persistence\UserEntityManager;
use App\Components\ShoppingCart\Persistence\ShoppingCartEntityManager;
use App\Components\ShoppingCart\Persistence\ShoppingCartRepository;
use App\Components\User\Persistence\UserRepository;
use App\Entity\Orders;
use App\Global\DTO\UserDTO;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class OrderFlowControllerTest extends WebTestCase
{
    public Request $request;
    public EntityManagerInterface $entityManager;
    public OrderFlowValidation $flowValidation;
    public ShoppingCartRepository $cartRepository;
    public  ShoppingCartEntityManager $cartEntityManager;
    public UserRepository $userRepository;
    public function setUp(): void
    {
        $this->client = self::createClient();

        $this->UserEntityManager = $this->client->getContainer()->get(UserEntityManager::class);
        $userDTO = new UserDTO();
        $userDTO->email = 'test@lol.com';
        $userDTO->username = 'test';
        $userDTO->password = 'Xyz12345*';
        $this->UserEntityManager->register($userDTO);

        $this->request = $this->createMock(Request::class);
        $this->entityManager = $this->createMock(EntityManagerInterface::class);
        $this->flowValidation = $this->createMock(OrderFlowValidation::class);
        $this->cartRepository = $this->createMock(ShoppingCartRepository::class);
        $this->cartEntityManager = $this->createMock(ShoppingCartEntityManager::class);
        $this->userRepository = $this->createMock(UserRepository::class);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testIndexUserNoPOST()
    {
        $userRepo = static::getContainer()->get(UserRepository::class);
        $user = $userRepo->findOneByEmail('test@lol.com');
        $this->client->loginUser($user);

        $this->client->request('GET', '/order/flow');

        self::assertResponseIsSuccessful($this->client->getResponse()->getContent());
        self::assertNotEmpty($this->client->getResponse()->getContent());
    }

    public function testIndexWithUserNotFoundNoPOST()
    {
        // Make a GET request to /order/flow
        $this->client->request('GET', '/order/flow');

        // Check if the response is a 404 Not Found (HTTP status code 404)
        self::assertResponseStatusCodeSame(Response::HTTP_NOT_FOUND);
        $this->assertStringContainsString('User not authenticated.', $this->client->getResponse()->getContent());
    }

    public function testIndexWhenResponseIsNull()
    {
        $entityManagerMock = $this->createMock(OrderFlowEntityManager::class);
        $entityManagerMock->expects($this->once())->method('persistOrder')->willReturn(null);

        $this->client->getContainer()->set(OrderFlowEntityManager::class, $entityManagerMock);

        $userRepo = static::getContainer()->get(UserRepository::class);
        $user = $userRepo->findOneByEmail('test@lol.com');
        $this->client->loginUser($user);

        $this->client->request('POST', '/order/flow');

        self::assertResponseRedirects('/order/flow/thankyou');
    }

    public function testSuccessNoUser()
    {
        // Make a GET request to /order/flow
        $this->client->request('GET', '/order/flow/thankyou');

        // Check if the response is a 404 Not Found (HTTP status code 404)
        self::assertResponseStatusCodeSame(Response::HTTP_NOT_FOUND);
        $this->assertStringContainsString('User not authenticated.', $this->client->getResponse()->getContent());
    }

    public function testSuccessNoOrderFound()
    {
        $userRepo = static::getContainer()->get(UserRepository::class);
        $user = $userRepo->findOneByEmail('test@lol.com');
        $this->client->loginUser($user);

        $this->client->request('POST', '/order/flow/thankyou');
        self::assertResponseStatusCodeSame(Response::HTTP_NOT_FOUND);
        $this->assertStringContainsString('Order not found.', $this->client->getResponse()->getContent());
    }

    public function testSuccess()
    {
        $order = new Orders();

        $ordersRepository = $this->createMock(OrdersRepository::class);
        $ordersRepository->expects($this->once())->method('findMostRecentOrderByEmail')->willReturn($order);

        $this->client->getContainer()->set(OrdersRepository::class, $ordersRepository);

        $userRepo = static::getContainer()->get(UserRepository::class);
        $user = $userRepo->findOneByEmail('test@lol.com');
        $this->client->loginUser($user);

        $this->client->request('POST', '/order/flow/thankyou');

        self::assertStringNotContainsString('User not authenticated.', $this->client->getResponse()->getContent());
        self::assertStringNotContainsString('Order not found.', $this->client->getResponse()->getContent());
        self::assertResponseIsSuccessful($this->client->getResponse()->getContent());
        self::assertStringContainsString('Products purchased', $this->client->getResponse()->getContent());
    }

    protected function tearDown(): void
    {
        $entityManager = $this->client->getContainer()->get(EntityManagerInterface::class);
        $connection = $entityManager->getConnection();

        $connection->executeQuery('DELETE FROM shopping_cart');
        $connection->executeQuery('ALTER TABLE shopping_cart AUTO_INCREMENT=0');

        $connection->executeQuery('DELETE FROM user');
        $connection->executeQuery('ALTER TABLE user AUTO_INCREMENT=0');

        $connection->close();
        parent::tearDown();
    }
}
